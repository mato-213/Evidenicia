package projectSI.persistence.entities;

// Generated 26.11.2015 21:36:01 by Hibernate Tools 4.3.1

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/**
 * ZoznamOsobLdap generated by hbm2java
 */
@Entity
@Table(name = "zoznam_osob_ldap", catalog = "unistatsdb")
@NamedQueries({
	@NamedQuery(name="Person.findByLdapId", query="SELECT p FROM Person p WHERE p.ldapId = :ldapId"),
	@NamedQuery(name="Person.findPublicationsInYears",  
	query="SELECT new projectSI.persistence.dto.PersonPublicationChartDTO(kod.skupina, pub.rokVydania, count(pub.id),sum(pa.podiel)) "
			+ "FROM Person p JOIN p.pubAutoriList pa JOIN pa.publikacia pub JOIN pub.epcKod kod "
			+ "WHERE p.ldapId = :ldapId and pub.rokVydania >= :beginYear and pub.rokVydania <= :endYear "
			+ "GROUP BY kod.skupina, pub.rokVydania"),
	@NamedQuery(name="Person.findPublicationsOfFakulty",  
	query="SELECT new projectSI.persistence.dto.PublicPublicationChartDTO(p.katedraKod, count(pub.id), sum(pa.podiel)) "
			+ "FROM Person p JOIN p.pubAutoriList pa JOIN pa.publikacia pub "
			+ "WHERE p.fakultaKod = :fakultaKod GROUP BY p.katedraKod"),
	@NamedQuery(name="Person.findAllDepartments",  
	query="SELECT DISTINCT NEW projectSI.persistence.dto.Department(p.katedraKod, p.katedraSkratka, p.katedra) "
			+ "FROM Person p GROUP BY p.katedraKod"),
	@NamedQuery(name="Person.findPublications",  
	query="SELECT pub FROM Person p JOIN p.pubAutoriList pa JOIN pa.publikacia pub JOIN pub.epcKod kod "
			+ "WHERE p.ldapId = :ldapId "),
	@NamedQuery(name="Person.findDepartmentPublications",  
			query="SELECT pub FROM Person p JOIN p.pubAutoriList pa JOIN pa.publikacia pub  "
					+ "WHERE p.katedraKod = :departmentCode "),
	@NamedQuery(name="Person.findAllFakulty",  
	query="SELECT DISTINCT NEW projectSI.persistence.dto.Fakulta(p.fakultaKod, p.fakulta) FROM Person p"),
	@NamedQuery(name="Person.findAllEmployeesOfDepartment",  
	query="SELECT NEW projectSI.persistence.dto.PersonComparisionDTO(p, count(pub.id),sum(pa.podiel) ) "
			+ "FROM Person p JOIN p.pubAutoriList pa JOIN pa.publikacia pub "
			+ "WHERE p.katedraKod = :departmentCode AND p.ldapId <> :ldapId "
			+ "GROUP BY p")
})
public class Person implements java.io.Serializable {

	private static final long serialVersionUID = 8330349546457658858L;
	
	private int ldapId;
	private String meno;
	private String priezvisko;
	private String plneMeno;
	private String katedra;
	private int katedraKod;
	private String katedraSkratka;
	private String fakulta;
	private int fakultaKod;
	private byte aktivny;
	private float uvazok;
	private String typZam;
	private String kzamKod;
	private String kzamPopis;
	
	private List<PubAutori> pubAutoriList;

	public Person() {
	}

	public Person(int ldapId, String meno, String priezvisko,
			String plneMeno, String katedra, int katedraKod,
			String katedraSkratka, String fakulta, int fakultaKod,
			byte aktivny, float uvazok, String typZam, String kzamKod,
			String kzamPopis) {
		this.ldapId = ldapId;
		this.meno = meno;
		this.priezvisko = priezvisko;
		this.plneMeno = plneMeno;
		this.katedra = katedra;
		this.katedraKod = katedraKod;
		this.katedraSkratka = katedraSkratka;
		this.fakulta = fakulta;
		this.fakultaKod = fakultaKod;
		this.aktivny = aktivny;
		this.uvazok = uvazok;
		this.typZam = typZam;
		this.kzamKod = kzamKod;
		this.kzamPopis = kzamPopis;
	}

	@Id
	@Column(name = "ldap_id", unique = true, nullable = false)
	public int getLdapId() {
		return this.ldapId;
	}

	public void setLdapId(int ldapId) {
		this.ldapId = ldapId;
	}

	@Column(name = "meno", nullable = false, length = 45)
	public String getMeno() {
		return this.meno;
	}

	public void setMeno(String meno) {
		this.meno = meno;
	}

	@Column(name = "priezvisko", nullable = false, length = 100)
	public String getPriezvisko() {
		return this.priezvisko;
	}

	public void setPriezvisko(String priezvisko) {
		this.priezvisko = priezvisko;
	}

	@Column(name = "plne_meno", nullable = false)
	public String getPlneMeno() {
		return this.plneMeno;
	}

	public void setPlneMeno(String plneMeno) {
		this.plneMeno = plneMeno;
	}

	@Column(name = "katedra", nullable = false)
	public String getKatedra() {
		return this.katedra;
	}

	public void setKatedra(String katedra) {
		this.katedra = katedra;
	}

	@Column(name = "katedra_kod", nullable = false)
	public int getKatedraKod() {
		return this.katedraKod;
	}

	public void setKatedraKod(int katedraKod) {
		this.katedraKod = katedraKod;
	}

	@Column(name = "katedra_skratka", nullable = false, length = 10)
	public String getKatedraSkratka() {
		return this.katedraSkratka;
	}

	public void setKatedraSkratka(String katedraSkratka) {
		this.katedraSkratka = katedraSkratka;
	}

	@Column(name = "fakulta", nullable = false)
	public String getFakulta() {
		return this.fakulta;
	}

	public void setFakulta(String fakulta) {
		this.fakulta = fakulta;
	}

	@Column(name = "fakulta_kod", nullable = false)
	public int getFakultaKod() {
		return this.fakultaKod;
	}

	public void setFakultaKod(int fakultaKod) {
		this.fakultaKod = fakultaKod;
	}

	@Column(name = "aktivny", nullable = false)
	public byte getAktivny() {
		return this.aktivny;
	}

	public void setAktivny(byte aktivny) {
		this.aktivny = aktivny;
	}

	@Column(name = "uvazok", nullable = false, precision = 5)
	public float getUvazok() {
		return this.uvazok;
	}

	public void setUvazok(float uvazok) {
		this.uvazok = uvazok;
	}

	@Column(name = "typ_zam", nullable = false, length = 50)
	public String getTypZam() {
		return this.typZam;
	}

	public void setTypZam(String typZam) {
		this.typZam = typZam;
	}

	@Column(name = "kzam_kod", nullable = false, length = 15)
	public String getKzamKod() {
		return this.kzamKod;
	}

	public void setKzamKod(String kzamKod) {
		this.kzamKod = kzamKod;
	}

	@Column(name = "kzam_popis", nullable = false)
	public String getKzamPopis() {
		return this.kzamPopis;
	}

	public void setKzamPopis(String kzamPopis) {
		this.kzamPopis = kzamPopis;
	}

	@OneToMany(mappedBy = "person")
	public List<PubAutori> getPubAutoriList() {
		return pubAutoriList;
	}

	public void setPubAutoriList(List<PubAutori> pubAutoriList) {
		this.pubAutoriList = pubAutoriList;
	}

}
